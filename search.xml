<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【经验分享】在Node.js&amp;Nginx部署中学到的</title>
    <url>/2020/02/16/%E3%80%90%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB%E3%80%91%E5%9C%A8Node-js-Nginx%E9%83%A8%E7%BD%B2%E4%B8%AD%E5%AD%A6%E5%88%B0%E7%9A%84/</url>
    <content><![CDATA[<h1 id="【经验分享】在Node-js-amp-Nginx部署中学到的"><a href="#【经验分享】在Node-js-amp-Nginx部署中学到的" class="headerlink" title="【经验分享】在Node.js&amp;Nginx部署中学到的"></a>【经验分享】在Node.js&amp;Nginx部署中学到的</h1><h2 id="1、源码安装和二进制安装方式的选择"><a href="#1、源码安装和二进制安装方式的选择" class="headerlink" title="1、源码安装和二进制安装方式的选择"></a>1、源码安装和二进制安装方式的选择</h2><p>服务器安装程序会首选源码安装方式.</p>
<p>优点显而易见，那就是编译出的软件更适合当前运行环境，且软件定制性强；在这种方式下，需要：</p>
<ul>
<li>正确安装gcc,make(和cmake),tar,gzip/bzip2及编译工具链的相关依赖</li>
<li>使用wget获取源码包</li>
<li>使用tar联合gzip/bzip2解压缩、解归档</li>
<li>如果需要，利用cmake工具和CMakeLists.txt来生成makefile</li>
<li>在源码目录下使用<code>./configure</code>配置编译和安装参数</li>
<li>使用<code>make</code>命令对源码进行编译（<code>-prefix</code>参数指定后续安装路径）</li>
<li>使用<code>make install</code>命令对编译好的二进制文件进行安装</li>
</ul>
<a id="more"></a>

<p>但编译需要时间成本，且不适合在运行有关键服务的环境中进行</p>
<p>我尝试在一台分配有单核e3 1240 v2处理器，768M内存的VPS上编译Node.js环境（含有npm），整个过程居然长达2小时！</p>
<p>有时安装编译好的二进制包是更好的选择</p>
<p>Note：像Nginx这种高度定制的软件如果需要的模块不多，还是建议编译安装，编译速度很快的</p>
<h2 id="2、有时不能使用相对路径"><a href="#2、有时不能使用相对路径" class="headerlink" title="2、有时不能使用相对路径"></a>2、有时不能使用相对路径</h2><p>通常使用将程序路径加入~/.bashrc配置环境变量，来实现把某程序设置为“命令”的目的</p>
<p>另一种方法是建立用户命令在/usr/bin中的软链接（Symbol Link）（<code>ln -s</code>）（每次在Bash中输入命令时，Bash就会在/usr/bin中自动查找），但不成功：</p>
<p>这是因为链接的时候使用的是相对路径，导致软链接文件中存储的也是相对路径，Bash无法正确识别了.</p>
<p>所以牢记使用<code>ln</code>进行链接的时候一定要使用绝对路径哦！</p>
<h2 id="3、善用SCP传输文件"><a href="#3、善用SCP传输文件" class="headerlink" title="3、善用SCP传输文件"></a>3、善用SCP传输文件</h2><p>大家都习惯使用wget从别人的网站上获取软件包等资源，但如果需要在本机和远程主机间建立文件传输，SCP将是一个简易而快捷的选择：</p>
<p><code>scp [-P &lt;port&gt;] &lt;source&gt; &lt;destination&gt;</code></p>
<p>其中，远程路径用username@host:path表示</p>
<p>SCP和SSH使用同样的协议，支持公私钥认证</p>
<h2 id="4、当心权限设置中的陷阱"><a href="#4、当心权限设置中的陷阱" class="headerlink" title="4、当心权限设置中的陷阱"></a>4、当心权限设置中的陷阱</h2><p>Nginx设置好服务和配置文件后运行，访问主机出现“403 Forbidden”，百思不得其解，后来发现是权限设置问题：</p>
<ul>
<li><p>首先为了安全，创建了登陆Shell为/sbin/nologin（即不能登入Bash）的nginx用户和同名的组，nginx.conf的user字段设置为nginx nginx</p>
</li>
<li><p>静态页面放在/root目录下，/root目录对其他组（nginx组）没开放r或x权限都会导致无法正常读取到页面而出错（r是获取目录结构的权限，x是进入目录的权限）</p>
</li>
<li><p>使用root用户直接或间接生成的文件的属主和属组都是root，这样产生的静态页面往往是nginx组的nginx用户无法访问的（还取决于文件的默认权限即umask）</p>
</li>
</ul>
<h2 id="4、Node-js后台运行的办法"><a href="#4、Node-js后台运行的办法" class="headerlink" title="4、Node.js后台运行的办法"></a>4、Node.js后台运行的办法</h2><p>想让Node.js服务端在后台运行，试验发现“使用<code>&amp;</code>将进程放入后台”及“<code>&amp;nohup</code>避免登出账户向进程发送挂断信号”这两个常用手段均失效</p>
<p>一个可行的办法是利用Node.js的pm2：</p>
<ul>
<li><p><code>npm install pm2 -g</code> 安装pm2包到全局</p>
</li>
<li><p><node_installation_path>/lib/node_modules/pm2/bin/pm2 是pm2所在处，将它配置到环境变量或建立其到/usr/bin的软链接</p>
</li>
<li><p>在目录Node.js脚本程序的目录下建立以下start.js文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const &#123; exec &#125; &#x3D; require(&#39;child_process&#39;)</span><br><span class="line">exec(&#39;&lt;node_start_command&gt;&#39;,(error, stdout, stderr) &#x3D;&gt; &#123;</span><br><span class="line">  if(error)&#123;</span><br><span class="line">    console.log(&#96;exec error: $&#123;error&#125;&#96;)</span><br><span class="line">    return</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(&#96;stdout: $&#123;stdout&#125;&#96;);</span><br><span class="line">  console.log(&#96;stderr: $&#123;stderr&#125;&#96;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在此目录中<code>pm2 start start.js [--name &lt;proc_name&gt;]</code>启动Node.js程序，之后就可以放心登出了</p>
</li>
<li><p><code>pm2 stop &lt;proc_name&gt;</code>停止某个Process的运行</p>
</li>
</ul>
<h2 id="5、杀死连接异常的登入"><a href="#5、杀死连接异常的登入" class="headerlink" title="5、杀死连接异常的登入"></a>5、杀死连接异常的登入</h2><p>在通过SSH连接远端服务器进行维护操作的时候，难免会因为网络原因连接中断，这时远程的登入依然存在，登入用户运行的程序并不会应为连接的断开而终结</p>
<p>这时如果不手动杀死异常的连接，会造成一定程度的资源浪费</p>
<p>杀死不正常的连接：</p>
<ul>
<li><code>w</code>命令查看当前登入的终端号</li>
<li><code>pstree</code>查看进程的父子关系，确认不正常连接产生的Bash进程执行的子进程</li>
<li><code>pkill -kill -t &lt;console_id&gt;</code>杀死该终端</li>
</ul>
<p>杀死僵死的进程：</p>
<ul>
<li><code>ps aux</code>或<code>pstree</code>查看进程的运行状态</li>
<li><code>killall -kill &lt;pname&gt;</code>按进程名杀死进程</li>
<li><code>kill -kill &lt;pid&gt;</code>按进程号杀死进程</li>
</ul>
]]></content>
      <categories>
        <category>经验分享</category>
      </categories>
      <tags>
        <tag>Linux Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>【学习笔记】Linux基础（二）：Linux的基本操作</title>
    <url>/2020/02/15/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91Linux%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9ALinux%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="二、Linux的基本操作"><a href="#二、Linux的基本操作" class="headerlink" title="二、Linux的基本操作"></a>二、Linux的基本操作</h2><h3 id="0、正确的开关机操作"><a href="#0、正确的开关机操作" class="headerlink" title="0、正确的开关机操作"></a>0、正确的开关机操作</h3><ul>
<li>开机和登陆：<ul>
<li>安全起见，一般不使用最高权限的root账户登入系统，管理系统时再使用</li>
<li>登录时为login程序提供账户名和密码即可，密码不会被显示，登陆后显示<code>[&lt;user_name&gt;@&lt;host_name&gt; &lt;current_dir&gt;]$</code>，$是普通用户的命令提示符（root用户是#）</li>
</ul>
</li>
<li>登出和关机/重启<ul>
<li>使用<code>exit</code>命令注销当前已登入的用户（不是关机）</li>
<li>Linux采用异步的异步的磁盘/内存数据传输模式，同时又是多人多任务操作系统，需要正确关机（服务器只有在维护时关机），且常常加挂UPS</li>
<li>关机前：<ul>
<li><code>su</code> 切换到root用户（superuser）</li>
<li><code>who</code> 查看哪些用户在线</li>
<li><code>netstat -a</code> 查看网络联机状态</li>
<li><code>ps aux</code> 检查运行的程序</li>
<li><code>sync</code> 将内存中的数据同步写入硬盘（shutdown/reboot/halt命令也会代为执行）（root用户保存所有用户数据，非root用户保存自己的数据）<a id="more"></a></li>
</ul>
</li>
<li>关机命令：<code>shutdown [-options] [time] [warnings]</code><ul>
<li>实体终端tty1-tty7所有用户都能执行，远程终端只有root可以执行</li>
<li>root超级用户的shutdown命令在/sbin/shutdown处</li>
<li>[warnings]是发给所有用户的提示信息</li>
<li>[time]为执行动作的延时时间，让登陆的各用户做好关机准备，默认不填为1min；格式：now或+minutes或HH:MM（具体时刻）</li>
<li>常用选项：<ul>
<li>-k 仅发送消息而不关机</li>
<li>-h 停止服务后立刻关机</li>
<li>-c 取消已经设定的关机定时</li>
<li>-r 重启</li>
</ul>
</li>
</ul>
</li>
<li>关机命令<code>poweroff</code>,重启命令<code>reboot</code>，停止系统命令<code>halt</code>(屏幕可能会保留系统停止的信息，与电源管理模式有关)，这三个命令都会调用<code>systemctl</code>指令执行操作，相当于<code>systemctl poweroff</code>,<code>systemctl reboot</code>和<code>systemctl halt</code>（还有<code>systemctl suspend</code>，用于进入休眠模式），理论上只让root执行</li>
<li>SystemV下的切换运行等级的指令<code>init</code>在systemd下依然兼容，<code>init 0</code>关机，<code>init 6</code>重启</li>
</ul>
</li>
</ul>
<h3 id="1、Linux的命令格式"><a href="#1、Linux的命令格式" class="headerlink" title="1、Linux的命令格式"></a>1、Linux的命令格式</h3><p><code>command [-options] parameter1 parameter2 ...</code></p>
<ul>
<li>第一部分：指令/可执行文件（如脚本）</li>
<li>第二部分：可选的选项<ul>
<li>-省略的选项</li>
<li>–完整的选项</li>
<li>选项可以写在一起，也可以分开写，比如-al和-a -l是一样的</li>
<li>有时候选项前是+而不是-</li>
</ul>
</li>
<li>其他部分：若干个可选的参数，是选项的参数或者是指令的参数</li>
<li>Note：<ul>
<li>空格区分各个部分，一个和多个空格等效</li>
<li>Linux大小写敏感</li>
<li>反斜杠（,escape）用来将回车转义，换行而不执行，方便在多行里输入长指令</li>
</ul>
</li>
</ul>
<h3 id="2、几个常用命令"><a href="#2、几个常用命令" class="headerlink" title="2、几个常用命令"></a>2、几个常用命令</h3><ul>
<li><code>date [+format]</code> 显示日期和时间<ul>
<li><code>+format</code> 选项，格式format举例：%Y/%m/%d或%H:%M</li>
</ul>
</li>
<li><code>cal [month] [year]</code> 显示日历<ul>
<li><code>cal year</code> 用来显示一整年的日历</li>
<li><code>cal month year</code> 用来显示某个有效年月的日历，无效会返回错误信息</li>
</ul>
</li>
<li><code>bc</code> 启动一个字符界面的简易计算器<ul>
<li>输入表达式-回车可以计算</li>
<li><code>scale=number</code>，number为结果小数点位数</li>
<li><code>quit</code>-回车 退出</li>
</ul>
</li>
<li><code>nano</code> 简单的文本编辑器<ul>
<li><code>nano &lt;path/filename&gt;</code> 打开一个文件</li>
<li>下方会显示按键说明，^表示Ctrl键，M表示Alt键</li>
<li>Ctrl-O 保存（WriteOut）</li>
<li>Ctrl-R 从其他文件读入资料（Read File）</li>
<li>Ctrl-W 搜索字符串（Where Is）</li>
<li>Ctrl-C 显示当前光标行列位置（Cur Pos）</li>
<li>Ctrl– 输入行号并跳转到该行</li>
<li>Alt-Y 语法校正功能开关</li>
<li>Alt-M 开启鼠标支持</li>
<li>Ctrl-G或F1 显示使用帮助</li>
<li>Ctrl-X 关闭软件</li>
</ul>
</li>
<li>Note：两种命令行程序<ul>
<li>直接运行，运行后向命令行输出结果并退出</li>
<li>运行后能在命令行和用户交互，直至接收到退出命令</li>
</ul>
</li>
</ul>
<h3 id="3、几个常用快捷键"><a href="#3、几个常用快捷键" class="headerlink" title="3、几个常用快捷键"></a>3、几个常用快捷键</h3><ul>
<li>Tab键：命令或选项或参数中的文件名/路径的自动补全功能<ul>
<li>可以唯一确定被补全的对象时，按一次就会补全</li>
<li>不能确定被补全的对象，按一次没反应，再按一次显示所有的可能的对象</li>
<li>Note：要补齐选项/参数，需要安装bash_completion软件，不过这可能导致有时文件名/路径不能自动补齐</li>
</ul>
</li>
<li>Ctrl+C组合键：中断目前程序</li>
<li>Ctrl+D组合键：发送EOF，远程连接时相当于<code>exit</code>-回车</li>
<li>Shift+Page UP/Page Down组合键：前后翻动字符界面的显示内容</li>
</ul>
<h3 id="4、遇到问题怎么办？"><a href="#4、遇到问题怎么办？" class="headerlink" title="4、遇到问题怎么办？"></a>4、遇到问题怎么办？</h3><ul>
<li>有错误信息，查看错误信息，里面说得很清楚！有时还会给出可能的纠错建议信息</li>
<li>忘记命令/命令的参数：平时只需要记忆命令的用途和常用命令的用法即可<ul>
<li>先输入确定的部分，再使用Tab键的自动补全功能</li>
<li>使用命令的<code>--help</code>说明选项查阅（里面有语法，可能有简要使用举例）</li>
<li><code>man &lt;command/file&gt;</code> 查询<command>命令的详细使用说明（manual）（先被查找到的那个手册，在/etc/man_db.conf中设置搜索结果排序，一般为序号小的那个）<ul>
<li>空格键向下翻页，Page Up/Page Down键上/下翻页，Home/End键翻到首/尾部</li>
<li>/word 向下搜索word（关键词），?word 向上搜索关键词，n键向下继续搜索，N键向上继续搜索</li>
<li>q键退出</li>
<li>每个命令的manual被划分到一个类别中，可以在其manual的开头看到类别对应的序号（如1-shell下的命令/可执行文件，4-/dev下设备装置文件的说明，5-配置文件等文件的格式，8-管理员的管理指令），通过<code>man man</code> 可以查选到类别对应表</li>
<li>各板块的推荐查询顺序：NAME（命令的意思）-DESCRIPTION（细节说明）-OPTIONS（所有可用的选项）-SEE ALSO（可参考的相关其他资料）/FILES（与该程序有关的文件说明）</li>
<li><code>man</code> 的手册文件通常在/usr/share/man里，通过修改/etc/man_db.conf（或man.conf或man.config或manpath.conf）可以修改手册文件的查询位置</li>
<li><code>man -f &lt;command&gt;</code>  查询和<command>命令有关的所有手册文件的编号和内容简介，<code>man &lt;number&gt; &lt;command&gt;</code>查看<command>命令的编号为<number> 的手册，<code>man -f</code>等效于<code>whatis</code></li>
<li><code>man -k &lt;keyword&gt;</code>  查询内容简介中含有<keyword>关键词的所有手册文件的编号和内容简介，<code>man -k</code>等效于<code>apropos</code></li>
</ul>
</li>
<li><code>info &lt;command&gt;</code> 分节点（node）查询<command>命令的使用详细说明，一个节点就是一个信息段落，节点之间存在链接<ul>
<li>n(Next)键前往同一层的下一个节点，p(Previous)键前往同一层的上一个节点，u(Up)键前往上一层节点</li>
<li>h(Help)键或输入?调出按键帮助</li>
<li>文本中用一个<code>*</code>来标识一个可以进入的node，光标间移动到<code>*</code>后回车可以进入这个node</li>
<li>Tab键可以在可进入的node间切换</li>
<li>q键退出</li>
<li>符合info格式的命令说明文档*.info在/usr/share/info中，info也可以查询非info格式的文档，显示结果和man相同</li>
</ul>
</li>
<li>部分已安装软件会在/usr/share/doc目录中存放文本格式的说明文档（How-To及其他信息），软件套件会在/usr/share/doc目录下建立自己的目录</li>
</ul>
</li>
</ul>
<h3 id="5、相关的其他知识"><a href="#5、相关的其他知识" class="headerlink" title="5、相关的其他知识"></a>5、相关的其他知识</h3><ul>
<li>关于登入登出和开关机：<ul>
<li>开机后登陆前显示的内容在/etc/issue文件中指定</li>
<li>文本模式登陆后进入的程序称为Shell，负责和使用者进行交互，比如bash Shell</li>
<li>主机名的显示通常只有第一个.之前的内容</li>
<li>Linux是个多用户操作系统，用户个人目录在/home/<user_name>处，也可以用<del>表示，</del>是一个变量</li>
<li>Linux下面的隐藏目录和文件是以小数点.开头的，以命名来确定是否被隐藏</li>
<li>命令执行结果乱码一般是语系不是英文<ul>
<li><code>locale</code>或<code>echo $LANG</code>命令显示当前选择的语系</li>
<li><code>LANG=en_US.utf8</code>修改为输出信息为显示英文语系（仅对本次登陆有效）</li>
<li><code>export LC_ALL=en_US.utf8</code>同步更新语系的其他选项为英文语系（仅对本次登陆有效）</li>
<li>修改/etc/locale.conf文件可以修改默认语系，重启后仍然有效</li>
</ul>
</li>
</ul>
</li>
<li>关于X Window：<ul>
<li>Linux预置6个文字终端，还有一个是图形终端，使用Ctrl+Alt+Fn切换，这些终端（tty）一开始并不存在，使用时才产生，先产生占据较小的tty号</li>
<li><code>startx</code>命令用来在文本模式下启动X Window（前提是没有其他的X Window启动且X Window System正确安装），不需要管理员身份，默认使用图形界面需要将graphical.target服务设为默认</li>
<li>重启系统不同于重启X Window，重启X Window可以先登出再重新登入或使用Gnome中设定好的重启X Window的快捷键</li>
</ul>
</li>
<li>关于控制台(Console)和终端(Terminal)：<ul>
<li>历史：<ul>
<li>控制台终端的概念起源于早期大型机，用于解决多用户共用一台计算机的问题</li>
<li>Console：物理操作面板，控制主机的工作状态，只有一个，上面有电源开关等，起到“总控台”的作用，后期的控制台也具有了键盘和显示器</li>
<li>Terminal：可以有多个，在主机完成启动后每个用户都可以通过Terminal连接到主机上进行工作；Terminal只有显示和输入输出功能，即只有键盘和显示器，不能进行计算</li>
<li>tty：Teletypewriter即电传打字机，是没有屏幕的Terminal，输出信息需要靠打印机或纸带打孔机</li>
</ul>
</li>
<li>在Unix中，Console和Terminal有明显的区分，系统运行消息只会显示在Console上</li>
<li>在Linux中：<ul>
<li>Console和Terminal的概念被模糊化，系统消息会被推送到所有终端上，控制台是终端的真子集</li>
<li>物理终端：直接连接在主机上的显示器、键盘鼠标的统称；机房里常见多台服务器主机共享一套KVM（Keyboard+Video+Mouse），通过切换器切换连接的服务器主机，以节省资源</li>
<li>虚拟终端：Ctrl+Alt+Fn所切换的tty1-tty6是虚拟终端，这些终端是软件模拟的，而不是真实的硬件，但使用起来和物理终端没有差异，对应的设备文件是/dev/tty[n]，由于它们在服务器本地建立，也被称为是“控制台”</li>
<li>远程终端：与本地终端相对的概念，空间上作区分；通过串口连接的终端是远程终端（同时也是物理终端），通过软件TCP/IP网络工具使用Telnet协议或SSH协议进行远程登入服务器的终端也是远程终端</li>
<li>伪终端：有两类，一是X Window下打开的终端模拟器，二是使用Telnet协议或SSH协议登陆的网络远程终端</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【学习笔记】Linux基础（一）：磁盘分区与Linux的安装（以CentOS为例）</title>
    <url>/2020/02/15/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91Linux%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E4%B8%8ELinux%E7%9A%84%E5%AE%89%E8%A3%85%EF%BC%88%E4%BB%A5CentOS%E4%B8%BA%E4%BE%8B%EF%BC%89/</url>
    <content><![CDATA[<h2 id="一、磁盘分区与Linux的安装（以CentOS为例）"><a href="#一、磁盘分区与Linux的安装（以CentOS为例）" class="headerlink" title="一、磁盘分区与Linux的安装（以CentOS为例）"></a>一、磁盘分区与Linux的安装（以CentOS为例）</h2><h3 id="0、说在安装之前"><a href="#0、说在安装之前" class="headerlink" title="0、说在安装之前"></a>0、说在安装之前</h3><ul>
<li>在Linux中，“一切设备皆文件”，设备在/dev这个目录下<ul>
<li>/dev/sd[a-p] 表示SCSI/SATA/USB存储设备（硬盘、U盘等），IDE接口的存储设备有时候也会被仿真为该类型设备</li>
<li>/dev/hd[a-d] 表示IDE存储设备</li>
<li>/dev/vd[a-p] 表示虚拟机中的VirtI/O存储设备</li>
<li>/dev/md[0-127] 表示软件RAID阵列</li>
<li>/dev/fd[0-7] 表示软盘驱动器</li>
<li>/dev/lp[0-2] 表示LPT并口的打印机，/dev/usb/lp[0-15] 表示USB接口的打印机</li>
<li>/dev/input/mouse[0-15] 表示通用鼠标， /dev/psaux 表示PS/2接口的鼠标，/dev/mouse 表示当前正在使用的鼠标</li>
<li>/dev/scd[0-1]或/dev/sr[0-1] 表示CD-ROM或DVD-ROM光驱，/dev/cdrom 表示当前CD-ROM</li>
<li>/dev/ht0 表示IDE接口的磁带机，/dev/st0 表示SATA/SCSI串口磁带机，/dev/tape 表示当前磁带机<a id="more"></a></li>
</ul>
</li>
<li>用字母来区分不同的物理存储设备<ul>
<li>外部存储设备的文件名[a-?]是由Linux核心侦测到磁盘的顺序有关，和物理连接情况关系不大；如连接到主板上的启动硬盘比连接到主板上的非启动硬盘先侦测到，而外接的USB磁盘最后被侦测到，先被侦测到的设备占据字母表较前的字母</li>
</ul>
</li>
<li>用字母后面的数字来区分同一物理存储设备上的不同分区<ul>
<li>MBR分区表允许有最多四个主分区(Primary Partition)或扩展分区（受OS制约，扩展分区往往最多只能有一个），扩展分区(Extended Partition)又可以被分为若干个逻辑分区(Logical Partition)；扩展分区不能被格式化，扩展分区只是逻辑分区的“容器”，只有主分区和逻辑分区可以被格式化<ul>
<li>1-4标记四个主分区或扩展分区，被用作主分区则会被有效占用，没被使用或被用作扩展分区则会被保留</li>
<li>逻辑分区从5开始标记</li>
</ul>
</li>
<li>GPT(GUID)分区方案统一采用LBA为存储区编址，预设一个LBA块为512Bytes，可调节为4KBytes大小；GPT分区表占用34+33个LBA块；LBA0位MBR兼容区块，防止MBR模式下破坏GPT分区，LBA1位GPT表头，记录GPT分区表位置和校验信息，LBA2-33位实际分区表，之后还有33个LBA块作为分区表备份<ul>
<li>所有的GPT分区都是平等的</li>
<li>GPT分区最多128个</li>
<li>fdisk工具不能识别GPT分区表，而gdisk和parted可以</li>
<li>由于存放Bootloader的/boot启动分区的存在，系统所在的/分区基本上在/dev/sda2以后</li>
</ul>
</li>
</ul>
</li>
<li>初期启动的流程：<ul>
<li>MBR方案：Legacy BIOS-&gt;MBR（MBR区域中）-&gt;Bootloader（主分区中）-&gt;Kernel（操作系统所在分区的Boot Sector中）</li>
<li>GPT+UEFI BIOS方案：UEFI BIOS-&gt;Bootloader（启动分区中的*.efi文件，启动分区可以是单独的，也可以和操作系统共用一个分区）-&gt;Kernel（操作系统所在分区中）</li>
<li>Bootloader（也称PBR）的作用：提供菜单，载入操作系统核心文件，把控制权交给别的分区的Bootloader实现多系统启动</li>
<li>Linux的Bootloader对多系统的支持比Windows的Bootloader要友好得多，且安装LInux的启动程序时能侦测到Windows的启动程序，因此建议先安装Windows，后安装Linux</li>
<li>如果使用的是UEFI BIOS，可能需要关闭Secure Boot功能，即关闭对操作系统的验证，才能启动Linux</li>
</ul>
</li>
<li>Linux中，通过目录树查找设备和文件，通过“挂载”来结合目录树的架构和磁盘内的数据<ul>
<li>“挂载点”是一个目录</li>
<li>可以将磁盘的某个分区（表现为一个文件）“挂载”到“挂载点”上</li>
<li>通过进入“挂载点”这个目录，就可以实现访问挂载好的分区里的数据了</li>
<li>根目录/是最重要的目录，必须作为挂载点为其挂载某个磁盘分区A，对根目录下数据的读写就是对磁盘分区A的读写</li>
<li>其他目录则可以根据需求挂载或不挂载其他的磁盘分区B，C，D……</li>
<li>当为根目录（一层或多层）下的某个目录挂载上其他磁盘分区B时，这个目录就会从磁盘分区A上分离出来，而受到磁盘分区B的控制，对这个目录的读写就是对磁盘分区B的读写</li>
<li>同样，一个磁盘分区可以被挂载到任何的挂载点上，也可以不被挂载</li>
</ul>
</li>
<li>镜像站是主站的完全克隆，并随时与主站保持同步，下载Linux安装镜像和配套程序时，应该使用可靠的当地镜像站，保证下载速度</li>
<li>CentOS是商业RHEL发行版的社区版本，与RHEL保持最大的兼容，其安装镜像的命名：CentOS-7-x86_64-Everything-1503-01.iso<ul>
<li>7和01说明发行版的版本号为7.1</li>
<li>x86_64说明该版本镜像是为64位的x86架构编译的，即x86兼容机上运行的64位操作系统</li>
<li>Everything是指该镜像是完整版的（包含所有安装软件），此外还有包含大部分安装软件的DVD1版，可以直接从安装介质启动Linux系统的LiveCD版以及仅含系统内核和少数重要工具软件的Minimal版</li>
</ul>
</li>
</ul>
<h3 id="1、硬盘分区方案"><a href="#1、硬盘分区方案" class="headerlink" title="1、硬盘分区方案"></a>1、硬盘分区方案</h3><ul>
<li>新手建议分两个区，一个挂载/，一个用作swap分区，但不保险，一旦分区损坏，整个/下的数据都可能会丢失</li>
<li>更复杂的分区方案需要考虑主机的用途，多分几个区，把需要较大容量的目录和读写较为频繁的目录挂载到与/不同的其他分区上，常见的需要单独分区的目录有：/boot,/home(多用户的Samba文件共享),/var(Mail Server),/usr(安装大量应用程序)</li>
</ul>
<h3 id="2、CentOS-7-x的安装"><a href="#2、CentOS-7-x的安装" class="headerlink" title="2、CentOS 7.x的安装"></a>2、CentOS 7.x的安装</h3><ul>
<li><p>Step0:制作启动介质（刻录光盘或向U盘写入启动镜像）</p>
<p>Linux下：<code>dd if=&lt;path_of_iso_file&gt; of=/dev/&lt;name_of_storage_device&gt;</code>，写入时间可能比较长，机器没有反应，耐心等待</p>
</li>
<li><p>Step1:调整BIOS以优先使用光驱或U盘启动机器或开机时直接进入启动顺序菜单选择从你的启动介质启动</p>
</li>
<li><p>Step2:磁盘没有超过2TB，安装程序默认使用MBR分区表</p>
<p>Note：强制使用GPT分区的办法：安装介质的引导界面按Tab，输入<code>vmlinuz initrd=initrd.img inst.stage2=hd:LABEL=CentOS\x207\x20x86_64 rd.live.check quiet inst.gpt</code>后回车即可</p>
<p>注意：\x20表示下划线，CentOS_7_x86_64就是安装介质的卷标（Label），这里一定要注意卷标要和你自己制作的启动盘卷标一致（鸟哥没说清楚，新手容易进坑）；stage2是安装环境（本质也是Linux系统）启动的第二阶段，由Bootloader负责，如果卷标指定不正确，就找不到Bootloader，Linux也不会载入，安装环境也就无法进入了</p>
<p>inst.gpt是强制使用GPT分区表的关键所在</p>
</li>
<li><p>Step3:根据图形安装向导设定时区、语言与键盘布局，选择需要安装的软件（比如是否需要X Window支持，如果需要，那么安装Gnome桌面环境还是KDE桌面环境等）</p>
</li>
<li><p>Step4:在选择安装位置的页面选择手动分区，关于分区和文件系统的说明如下（本人自己查阅资料并做实验总结的，这里对新人是巨坑，不要照着教程做，要明白原理，根据自己的系统合理设计），分区的同时为这些分区选好挂载点（如/boot,/home,/,swap）：</p>
<ul>
<li>根分区/是必须要分的区，系统大部分没有另外挂载的目录结构都保存在根分区内</li>
<li>swap分区是交换分区，起到“虚拟内存”的作用，不被挂载，可以适当大一点（数GB，物理内存较少是经验值为物理内存的2倍），当然也可以不要</li>
<li>先区分两组概念：MBR与GPT，Legacy BIOS和UEFI BIOS；前者是两种磁盘分区表，后者是两种不同的BIOS（采用两种不同的启动机制）；两组概念彼此独立，可以互相搭配产生4种方案，但常用的是MBR分区表+Legacy BIOS启动方案和GPT分区表+UEFI BIOS启动方案</li>
<li>/boot里面有两个比较重要的东西，一个是系统内核vmlinuz，另一个是Bootloader（grub）的相关配置文件；在UEFI BIOS启动的计算机中，还有第三个重要的东西——*.efi启动文件；/boot分区大小不需要太大（1G以内即可）<ul>
<li>如果你的计算机用的是老旧的Legacy BIOS，为/boot单独分区是可选项<ul>
<li>Legacy BIOS启动方式通过MBR中的启动代码调取活动分区的PBR，PBR也就是Bootloader负责启动内核<ul>
<li>如果不为/boot单独分区，根分区就是活动分区，/boot只是根分区下的一个普通目录，内核和Bootloader也就装在根分区下的/boot目录里了</li>
<li>如果为/boot单独分区，这个单独的启动分区就是活动分区，内核和Bootloader装在这个单独的分区里，根分区下仍然有/boot这个普通目录，只不过里面是空的，起到挂载点的作用，用来挂载那个单独的启动分区</li>
</ul>
</li>
<li>这两种方案都能够正常启动，只不过单独制作启动分区并以只读方式挂载到/boot下要更加安全，根分区损坏了，Linux仍然能够启动</li>
</ul>
</li>
<li>如果你的计算机用的是较新的UEFI BIOS，建议为/boot单独分区<ul>
<li>UEFI BIOS启动方式下，UEFI BIOS能够直接搜素任何FAT32分区，找到其中的*.efi启动文件来直接加载Bootloader<ul>
<li>大部分UEFI BIOS对于Linux的ext4文件系统支持不佳，不能正常搜索ext4分区里的*.efi启动文件，如果根分区采用非FAT32格式（通常做法）而不为/boot设置单独分区，结果往往是无法启动</li>
<li>如果将分出单独的FAT32格式的启动分区，放入系统内核vmlinuz，*.efi启动文件和Bootloader（grub）的相关配置文件，就能被UEFI BIOS识别并正常启动Linux了，这时根分区下有空的/boot目录，作为启动分区的挂载点</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>BIOS Boot分区不被挂载，当且仅当使用GPT分区表和Legacy BIOS启动的非常规方案的时候需要该分区，这个分区是个GPT分区，采用特殊文件系统；BIOS Boot分区大小不需要太大，2MB以内即可<ul>
<li>采用GPT分区表+Legacy BIOS启动方案一般是因为MBR分区表难以寻址2TB大硬盘，需要支持大硬盘而主板比较老，只能使用Legacy BIOS启动时使用该方案</li>
<li>能否识别GPT分区表和操作系统密切相关，而和使用什么BIOS无关</li>
<li>使用Lagacy BIOS方式启动时，会先执行MBR中的引导程序，也就是GPT分区方案下LBA0处的MBR兼容区块中的引导代码（硬盘最前部446KB的代码），这段代码会查询MBR分区表（DPT），找到四个分区里第一个活动主分区，并转到这个分区，将控制权交给该分区的PBR（也就是Bootloader）；在GPT分区方案下，分区结构和MBR分区方案下是不一样的，因此需要采用MBR分区方案的一个特殊的非GPT分区，这就是BIOS Boot分区，充当“第一个活动主分区”，存放PBR和Bootloader相关文件，这个Bootloader会加载GPT分区中的系统内核</li>
</ul>
</li>
<li>三种常见分区类型（分区管理方式）的解释：<ul>
<li>标准分区：普通分区，一旦确定难以调整大小</li>
<li>LVM：一种可以弹性增减容量的分区</li>
<li>LVM紧张供应：“更高级”的LVM，容量取决于实际使用量，即“要多少给多少，不要不多给”</li>
</ul>
</li>
<li>常见的文件系统：<ul>
<li>ext2/ext3/ext4：Linux原生文件系统，ext3/4具有日志功能</li>
<li>xfs：RHEL默认文件系统，对大型服务器的大容量存储非常友好</li>
<li>vfat：就是Windows里的FAT32文件系统，可以同时被WIndows和Linux识别，但注意不支持4GB以上的大文件</li>
<li>以下不算是严格意义上的文件系统，但被列在“文件系统”里，选择格式化为这些“文件系统”是为了让系统分辨特殊用途的分区：<ul>
<li>swap：不需要被挂载到目录树，充当虚拟内存，是Linux特殊的文件系统</li>
<li>BIOS Boot：GPT分区表下为了兼容Legacy BIOS启动而设置的特殊分区</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Step5:根据图形向导设置核心管理及网络设定</p>
<ul>
<li>Kdump是当宕机是转储内存数据的功能，多用于核心除错</li>
<li>网卡名应为eth0,plp1,em1等类似的名称</li>
<li>最好选择“网络可用时自动连接”，这样开机后默认会连接网络</li>
<li>网络上的主机名应该一并设好，各字段习惯上用.分隔</li>
</ul>
</li>
<li><p>Step6:开始安装，同时设定root用户的密码和其他一般用户或管理员的用户名及密码</p>
</li>
<li><p>Step7:安装完成！</p>
</li>
</ul>
<p>Note：安装光盘的其他常用功能：</p>
<ul>
<li><p>启动时Troubleshooting-Run a memory test，使用Memtest86+进行内存测试，检查稳定性</p>
</li>
<li><p>笔记本电脑的电源管理比较特殊，可能装不上-&gt;启动时按Tab-输入<code>nofb apm=off acpi=off pci=noacpi</code>核心参数-回车；nofb是取消对显卡缓存的侦测，apm是早期电源管理机制，acpi是比较新的电源管理机制</p>
</li>
<li><p>在图形化安装界面，通过Ctrl+Alt+Fn切换到ttyn终端上，其中tty1-5位字符终端，tty6为图形终端</p>
</li>
<li><p>字符终端下使用parted命令手动分区：</p>
<ul>
<li><code>parted /dev/&lt;name_of_device&gt; mklabel msdos</code> 建立MBR分区表</li>
<li><code>parted /dev/&lt;name_of_device&gt; mkpart [primary/extended/logical] &lt;location_of_start&gt; &lt;location_of_end&gt;</code> 建立分区，<location_of_start>和<location_of_end>都使用距离磁盘起始的容量表示，分区容量=<location_of_end>-<location_of_start></li>
<li><code>parted /dev/&lt;name_of_device&gt; print</code> 显示分区情况</li>
</ul>
<p>Note：挂载点设定和文件系统选择+分区格式化建议切回图形终端进行</p>
</li>
<li><p>修复Linux的grub引导或建立多系统grub引导：</p>
<ul>
<li><p>Step1:启动时Troubleshooting-Rescue a CentOS System-Continue-OK进入安装镜像提供的救援Linux环境</p>
</li>
<li><p>Step2:<code>chroot /mnt/sysimage</code> 将根目录切换到/mnt/sysimage下，也就是硬盘上Linux的根目录下（救援环境会自动将硬盘上Linux的根目录挂载到/mnt/sysimage处）</p>
</li>
<li><p>Step3:<code>grub2-install /dev/&lt;name_of_hd_device&gt;</code> 重新为硬盘安装grub引导，<code>exit</code>-<code>reboot</code>，即可从硬盘正常启动到Linux</p>
</li>
<li><p>Step4:如果需要多系统引导，Linux下<code>vim /etc/grub.d/40_custom</code>编辑grub2的自定义配置文件，加入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menuentry &quot;&lt;name_of_Windows_OS&gt;&quot;&#123;</span><br><span class="line">	set boot&#x3D;&#39;(hd&lt;number_of_hd_device&gt;,&lt;number_of_windows_partition&gt;)&#39;</span><br><span class="line">	chainloader +1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中，<number_of_hd_device>和<number_of_windows_partition>都是从0开始编号的，例如/dev/sda3下对应的<number_of_hd_device>是0，<number_of_windows_partition>是2；chainloader +1表示读入指定分区第一个扇区里的PBR以加载Windows的Bootloader（ntldr或bootmgr）</p>
<p>如果需要，<code>vim /etc/default/grub</code> 更改启动菜单等待时间</p>
<p>最后，<code>grub2-mkconfig -o /boot/grub2/grub.cfg</code>利用/etc中的配置文件更新/boot/grub2/grub.cfg这个有效启动配置文件即可修改启动菜单实现Windows的引导</p>
<p>Note：Windows下最好将无法识别文件系统的Linux分区隐藏掉（不分配卷标），否则容易误格式化</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【学习笔记】Linux基础（零）：预备知识</title>
    <url>/2020/02/15/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91Linux%E5%9F%BA%E7%A1%80%EF%BC%88%E9%9B%B6%EF%BC%89%EF%BC%9A%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h1 id="Linux基础学习笔记"><a href="#Linux基础学习笔记" class="headerlink" title="Linux基础学习笔记"></a>Linux基础学习笔记</h1><p>Note：本学习笔记源自《鸟哥的Linux私房菜（基础学习篇）》一书，为此书重要内容的摘要和总结，对于一些常识性的知识不再归纳</p>
<h2 id="零、Linux预备知识"><a href="#零、Linux预备知识" class="headerlink" title="零、Linux预备知识"></a>零、Linux预备知识</h2><h3 id="0、硬件小知识"><a href="#0、硬件小知识" class="headerlink" title="0、硬件小知识"></a>0、硬件小知识</h3><ul>
<li>精简指令集RSIC处理器的指令少，单个指令运行快但复杂任务所需要的指令多：Oracle公司的SPARC架构，IBM公司的PowerPC架构，ARM架构等；复杂指令集CSIC：Intel公司x86架构及其兼容型</li>
<li>为了与32位的x86架构区分开来，x86_64专指64位x86架构；同属于x86架构，i386指80386机，i686指Pentium II/Intel Celeron或AMD Athlon(K7)机</li>
<li>比TB(Tera Bytes)更大的容量单位好友EB(Exa Bytes)和ZB(Zetta Bytes)</li>
<li>存储上（Bytes），相邻单位为1024倍的关系，而速度（Hz）上，通常为1000倍的关系；值得注意的是，硬盘制造商通常会采用1000倍关系，这与扇区(sector)数有关（传统的1个扇区=512Bytes，现在有了4K大小的扇区）</li>
<li>北桥连接CPU和内存、显卡，总线速度较快；南桥连接硬盘控制器、外设等速度较慢的设备；新的Intel架构主板往往将内存控制器集成在CPU中，采用单个桥芯片（南桥），以提高速度，CPU与内存、显卡、南桥之间通过QPI与DMI(Intel)或Hyper Transport(AMD)技术通信</li>
<li>前端总线FSB是内存控制器与内存之间的总线</li>
<li>L2 Cache一般为容量小、单位容量晶体管数目多、速度比DRAM快的SRAM存储器，设计在CPU内部，运行在与CPU一样的频率上，存放一些经常被使用的数据，减少低速的内存访问<a id="more"></a></li>
<li>SATA每10Bits数据都有2Bits用作校验，带宽计算需要注意</li>
<li>SAS即串行SCSI(Serial Attached SCSI)，比SATA快但成本高</li>
<li>IOPS:Input/Output Operations Per Second</li>
<li>PCIe(PCI Express)总线的xn是可以累计计算的，比如一个x16控制器可以带动两个x8的设备或一个x8和两个x4的设备全速工作；PCIe通道有的是直连CPU的，速度快，有的是通过南桥的PCIe 2.0/3.0控制器间接控制，速度较慢（有时候DMI总线宽度会成为PCIe的瓶颈）；有些x16插槽只有x8或更少的部分有金手指，需要查阅主板说明书</li>
<li>GT/s即千兆传输每秒(Giga Transmission per second)，是物理层通信速度，需要按照通信协议和总线宽度的不同转换为文件传输速率GByte/s</li>
<li>使用<code>cat /proc/cpuinfo</code>和<code>lspci</code>命令可以查看硬件信息</li>
</ul>
<h3 id="1、Linux的历史"><a href="#1、Linux的历史" class="headerlink" title="1、Linux的历史"></a>1、Linux的历史</h3><ul>
<li><p>MIT的兼容分时系统CTSS（Compatible Time-Sharing System）利用终端机访问和共享大型机资源，终端机仅有I/O功能</p>
</li>
<li><p>MIT&amp;GE发起Multics计划，强化多用户分时系统，Bell实验室退出Multics计划</p>
</li>
<li><p>Bell实验室Ken Tompson用汇编语言写出Unix核心原型（两个重要思想：程序和系统装置都是文件；程序只有一个目的，且要有效地完成目标）</p>
</li>
<li><p>1973年Unix诞生，随后被以高级语言重构（Dennis Ritchie），伴随C语言的诞生，高级语言带来强大的可移植性</p>
</li>
<li><p>1977年加州大学伯克利分校，类Unix系统BSD诞生</p>
</li>
<li><p>1979年，AT&amp;T发布System V，一个x86上的Unix发行版，Unix向小型机和个人计算机迁移</p>
<p>Note：发行版-将操作系统和工具软件（如图形界面）、安装程序、文档等打包发布</p>
</li>
<li><p>1979年，AT&amp;T决定不再公开Unix原始码</p>
</li>
<li><p>为了在拿不到原始码的情况下进行Unix内核教学，1984年x86架构下Minix系统开始编写，非免费</p>
</li>
<li><p>1984年，Stallman发起GNU（GNU‘s Not Unix）计划，参考Unix上的软件自己写了一些自由的小软件，并筹划编写GNU C Compiler(gcc)，向Unix移植了自己写的Emacs编辑器，成立自由软件基金会FSF，编写GNU C Library(glibc)和Bash Shell，起草通用公共许可证GPL防止自由软件被利用</p>
</li>
<li><p>1988年MIT主导发表了X Window System，成立XFree86组织，编写图形GUI</p>
</li>
<li><p>1991年Linus Torvalds开发出Linux v0.02核心原型，开放源代码，Linux诞生并在开发者社区文化下迅速发展</p>
</li>
</ul>
<h3 id="2、有关Linux的小知识"><a href="#2、有关Linux的小知识" class="headerlink" title="2、有关Linux的小知识"></a>2、有关Linux的小知识</h3><ul>
<li>Linux是操作系统，包括核心（含有少量核心工具）和系统调用两层，是硬件和应用程序之间的接口</li>
<li>最初Linux基于Intel 80386架构编写，在FTP上共享源代码（GNU GPL协议），BBS上进行开发交流，很快被移植到其他平台架构</li>
<li>Linux的开发参考了IEEE为Unix设计的标准的POSIX（Portable Operating System Interface）规范，是一种类Unix（Unix Like）操作系统</li>
<li>Linux内核采用模块化开发，新功能引入快</li>
<li>Linux的内核版本号：主版本.次版本.释出版本-修改版本，通过<code>uname -r</code>命令查询；注意区分发行版版本和内核版本<ul>
<li>2.6.x版本以前，主、次版本为奇数是发展中版本，偶数为稳定版本；新功能累积产生新的释出版本；针对某个版本的核心修改程序产生修改版本</li>
<li>3.0版本后主要依据主线版本（MainLine）开发核心，如3.9主线版本继续开发产生3.10主线版本</li>
<li>有些核心版本在结束开发后不再有人维护（End of Live，EOL），有些则是长期维护版本（LTS）</li>
</ul>
</li>
<li>不同Linux发行版使用同样的Linux内核，应用软件大同小异，基本上都遵守Linux Standard Base（LSB）和File system Hierarchy Standard（FHS）规范以约束开发者；商业公司开发的发行版通常比社群版更加保守稳定<ul>
<li>采用RPM软件管理的发行版：RHEL和SuSE（商业）；Fedora、CentOS和OpenSuSE（社群）等</li>
<li>采用DPKG软件管理的发行版：Ubuntu（商业）；Debian（社群）等</li>
<li>其他发行版：Arch、Gentoo等</li>
</ul>
</li>
<li>自由(Freedom)!=免费(Free)，“自由”包括：取得软件与源码、复制、修改、再发行和回馈社群的权利与义务，不可以修改自由软件的许可证，也不能将其单纯贩卖（贩卖服务、手册等附加价值是可以的）</li>
<li>自由软件是许可证更加严格的开源软件，非自由的开源软件再发布的授权可以与原软件不同，其全部或部分可作为其他软件的一部分，对商业行为相对更加友好，比如Apache授权、MIT授权和BSD授权</li>
</ul>
<h3 id="3、关于Linux学习方法"><a href="#3、关于Linux学习方法" class="headerlink" title="3、关于Linux学习方法"></a>3、关于Linux学习方法</h3><ul>
<li><p>兴趣+成就感</p>
</li>
<li><p>习惯命令行，抛弃X Window(X11)环境</p>
</li>
<li><p>从头学习Linux基础，不要急于搞网络应用</p>
</li>
<li><p>找一本好的工具书，用作命令参考</p>
</li>
<li><p>多多上机练习，简易在实体机上装个Linux发行版（Distribution）</p>
</li>
<li><p>遇到问题先自己摸索尝试解决</p>
<ul>
<li>在主机或网络数据库上查询How-To/FAQ</li>
<li>注意屏幕信息输出，勤于查看/var/log里的日志</li>
</ul>
</li>
<li><p>善于提问，《提问的智慧》</p>
</li>
<li><p>参与讨论、协助回答问题</p>
</li>
<li><p>尝试Debug，不要利用重启/重装系统解决问题</p>
</li>
<li><p>养成做记录和整理的习惯，初学时多多借鉴他人的资料</p>
</li>
<li><p>尝试多种解决问题的办法，举一反三，培养长远、整体的眼光</p>
</li>
<li><p>不要有知识偏见</p>
</li>
<li><p>生产环境下的操作一定要谨慎，打字过快容易出现错误</p>
</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
